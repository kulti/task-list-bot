// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package store_test is a generated GoMock package.
package store_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepository is a mock of repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InitNewSprint mocks base method
func (m *MockRepository) InitNewSprint() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitNewSprint")
	ret0, _ := ret[0].(error)
	return ret0
}

// InitNewSprint indicates an expected call of InitNewSprint
func (mr *MockRepositoryMockRecorder) InitNewSprint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitNewSprint", reflect.TypeOf((*MockRepository)(nil).InitNewSprint))
}

// CurrentSprint mocks base method
func (m *MockRepository) CurrentSprint() ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentSprint")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentSprint indicates an expected call of CurrentSprint
func (mr *MockRepositoryMockRecorder) CurrentSprint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentSprint", reflect.TypeOf((*MockRepository)(nil).CurrentSprint))
}

// UpdateCurrentSprint mocks base method
func (m *MockRepository) UpdateCurrentSprint(data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCurrentSprint", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCurrentSprint indicates an expected call of UpdateCurrentSprint
func (mr *MockRepositoryMockRecorder) UpdateCurrentSprint(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCurrentSprint", reflect.TypeOf((*MockRepository)(nil).UpdateCurrentSprint), data)
}
